// Code generated by MockGen. DO NOT EDIT.
// Source: E:\workspace\github.com\bbs-spider\bbs-web\internal\service\articleService.go

// Package svcmocks is a generated GoMock package.
package svcmocks

import (
	domain "bbs-web/internal/domain"
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockIArticleService is a mock of IArticleService interface.
type MockIArticleService struct {
	ctrl     *gomock.Controller
	recorder *MockIArticleServiceMockRecorder
}

// MockIArticleServiceMockRecorder is the mock recorder for MockIArticleService.
type MockIArticleServiceMockRecorder struct {
	mock *MockIArticleService
}

// NewMockIArticleService creates a new mock instance.
func NewMockIArticleService(ctrl *gomock.Controller) *MockIArticleService {
	mock := &MockIArticleService{ctrl: ctrl}
	mock.recorder = &MockIArticleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIArticleService) EXPECT() *MockIArticleServiceMockRecorder {
	return m.recorder
}

// GetById mocks base method.
func (m *MockIArticleService) GetById(ctx context.Context, id int64) (domain.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(domain.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIArticleServiceMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIArticleService)(nil).GetById), ctx, id)
}

// GetByIds mocks base method.
func (m *MockIArticleService) GetByIds(ctx context.Context, biz string, ids []int64) ([]domain.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIds", ctx, biz, ids)
	ret0, _ := ret[0].([]domain.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIds indicates an expected call of GetByIds.
func (mr *MockIArticleServiceMockRecorder) GetByIds(ctx, biz, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIds", reflect.TypeOf((*MockIArticleService)(nil).GetByIds), ctx, biz, ids)
}

// GetPublishedById mocks base method.
func (m *MockIArticleService) GetPublishedById(ctx context.Context, id, uid int64) (domain.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublishedById", ctx, id, uid)
	ret0, _ := ret[0].(domain.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublishedById indicates an expected call of GetPublishedById.
func (mr *MockIArticleServiceMockRecorder) GetPublishedById(ctx, id, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublishedById", reflect.TypeOf((*MockIArticleService)(nil).GetPublishedById), ctx, id, uid)
}

// List mocks base method.
func (m *MockIArticleService) List(ctx context.Context, uid int64, offset, limit int) ([]domain.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, uid, offset, limit)
	ret0, _ := ret[0].([]domain.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIArticleServiceMockRecorder) List(ctx, uid, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIArticleService)(nil).List), ctx, uid, offset, limit)
}

// ListPub mocks base method.
func (m *MockIArticleService) ListPub(ctx context.Context, start time.Time, offset, limit int) ([]domain.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPub", ctx, start, offset, limit)
	ret0, _ := ret[0].([]domain.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPub indicates an expected call of ListPub.
func (mr *MockIArticleServiceMockRecorder) ListPub(ctx, start, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPub", reflect.TypeOf((*MockIArticleService)(nil).ListPub), ctx, start, offset, limit)
}

// Publish mocks base method.
func (m *MockIArticleService) Publish(ctx context.Context, art domain.Article) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, art)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockIArticleServiceMockRecorder) Publish(ctx, art interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockIArticleService)(nil).Publish), ctx, art)
}

// PublishV1 mocks base method.
func (m *MockIArticleService) PublishV1(ctx context.Context, art domain.Article) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishV1", ctx, art)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishV1 indicates an expected call of PublishV1.
func (mr *MockIArticleServiceMockRecorder) PublishV1(ctx, art interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishV1", reflect.TypeOf((*MockIArticleService)(nil).PublishV1), ctx, art)
}

// Save mocks base method.
func (m *MockIArticleService) Save(ctx context.Context, art domain.Article) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, art)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockIArticleServiceMockRecorder) Save(ctx, art interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIArticleService)(nil).Save), ctx, art)
}

// Withdraw mocks base method.
func (m *MockIArticleService) Withdraw(ctx context.Context, art domain.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", ctx, art)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockIArticleServiceMockRecorder) Withdraw(ctx, art interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockIArticleService)(nil).Withdraw), ctx, art)
}
