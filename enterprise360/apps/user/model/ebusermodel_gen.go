// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	ebUserFieldNames          = builder.RawFieldNames(&EbUser{})
	ebUserRows                = strings.Join(ebUserFieldNames, ",")
	ebUserRowsExpectAutoSet   = strings.Join(stringx.Remove(ebUserFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	ebUserRowsWithPlaceHolder = strings.Join(stringx.Remove(ebUserFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheEbUserIdPrefix       = "cache:ebUser:id:"
	cacheEbUserUsernamePrefix = "cache:ebUser:username:"
)

type (
	ebUserModel interface {
		Insert(ctx context.Context, data *EbUser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*EbUser, error)
		FindOneByUsername(ctx context.Context, username string) (*EbUser, error)
		Update(ctx context.Context, data *EbUser) error
		Delete(ctx context.Context, id int64) error
	}

	defaultEbUserModel struct {
		sqlc.CachedConn
		table string
	}

	EbUser struct {
		Id         int64          `db:"id"`          // id自增
		Username   string         `db:"username"`    // 用户名
		Avatar     string         `db:"avatar"`      // 头像
		Password   string         `db:"password"`    // 密码密文
		Mobile     sql.NullString `db:"mobile"`      // 手机号
		CreateTime time.Time      `db:"create_time"` // 创建时间
		UpdateTime time.Time      `db:"update_time"` // 更新时间
		DeleteTime sql.NullTime   `db:"delete_time"` // 删除标记
	}
)

func newEbUserModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultEbUserModel {
	return &defaultEbUserModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`eb_user`",
	}
}

func (m *defaultEbUserModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	ebUserIdKey := fmt.Sprintf("%s%v", cacheEbUserIdPrefix, id)
	ebUserUsernameKey := fmt.Sprintf("%s%v", cacheEbUserUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, ebUserIdKey, ebUserUsernameKey)
	return err
}

func (m *defaultEbUserModel) FindOne(ctx context.Context, id int64) (*EbUser, error) {
	ebUserIdKey := fmt.Sprintf("%s%v", cacheEbUserIdPrefix, id)
	var resp EbUser
	err := m.QueryRowCtx(ctx, &resp, ebUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ebUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultEbUserModel) FindOneByUsername(ctx context.Context, username string) (*EbUser, error) {
	ebUserUsernameKey := fmt.Sprintf("%s%v", cacheEbUserUsernamePrefix, username)
	var resp EbUser
	err := m.QueryRowIndexCtx(ctx, &resp, ebUserUsernameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", ebUserRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, username); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultEbUserModel) Insert(ctx context.Context, data *EbUser) (sql.Result, error) {
	ebUserIdKey := fmt.Sprintf("%s%v", cacheEbUserIdPrefix, data.Id)
	ebUserUsernameKey := fmt.Sprintf("%s%v", cacheEbUserUsernamePrefix, data.Username)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, ebUserRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Username, data.Avatar, data.Password, data.Mobile, data.DeleteTime)
	}, ebUserIdKey, ebUserUsernameKey)
	return ret, err
}

func (m *defaultEbUserModel) Update(ctx context.Context, newData *EbUser) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	ebUserIdKey := fmt.Sprintf("%s%v", cacheEbUserIdPrefix, data.Id)
	ebUserUsernameKey := fmt.Sprintf("%s%v", cacheEbUserUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, ebUserRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Username, newData.Avatar, newData.Password, newData.Mobile, newData.DeleteTime, newData.Id)
	}, ebUserIdKey, ebUserUsernameKey)
	return err
}

func (m *defaultEbUserModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheEbUserIdPrefix, primary)
}

func (m *defaultEbUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ebUserRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultEbUserModel) tableName() string {
	return m.table
}
